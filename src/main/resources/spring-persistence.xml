<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
              xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/mvc
                           http://www.springframework.org/schema/mvc/spring-mvc.xsd
                           http://www.springframework.org/schema/tx 
                           http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd"> 

    <!-- Bean definitions go here -->

    <tx:annotation-driven />
    
    <!-- <bean id="dataSource"
          class="org.apache.commons.dbcp2.BasicDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/martinis?serverTimezone=EST"/>
        <property name="username" value="root"/>
        <property name="password" value="rootroot"/>
        <property name="initialSize" value="5"/>
        <property name="maxTotal" value="10"/>
    </bean> -->

    <!-- Support both Railway (DATABASE_URL or MYSQL_URL) and Heroku (JAWSDB_URL) -->
    <!-- Default to a dummy URL if no database environment variable is set to prevent startup failure -->
    <bean class="java.net.URI" id="dbUrl">
        <constructor-arg value="#{systemEnvironment['DATABASE_URL'] ?: systemEnvironment['MYSQL_URL'] ?: systemEnvironment['JAWSDB_URL'] ?: 'mysql://user:pass@localhost:3306/martinis'}" />
    </bean>

    <bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver" />
        <property name="url" value="#{ 'jdbc:mysql://' + @dbUrl.getHost() + ':' + @dbUrl.getPort() + @dbUrl.getPath() + '?useSSL=false&amp;serverTimezone=UTC&amp;allowPublicKeyRetrieval=true&amp;connectTimeout=5000&amp;socketTimeout=30000' }" />
        <property name="username" value="#{ @dbUrl.getUserInfo() != null ? @dbUrl.getUserInfo().split(':')[0] : 'root' }" />
        <property name="password" value="#{ @dbUrl.getUserInfo() != null ? @dbUrl.getUserInfo().split(':')[1] : '' }" />
        <property name="initialSize" value="0" />
        <property name="maxTotal" value="10" />
        <property name="minIdle" value="0" />
        <property name="maxIdle" value="5" />
        <property name="maxWaitMillis" value="10000" />
        <!-- Disable validation on startup for faster boot -->
        <property name="testOnBorrow" value="false" />
        <property name="testWhileIdle" value="true" />
        <property name="validationQuery" value="SELECT 1" />
        <property name="validationQueryTimeout" value="3" />
        <property name="timeBetweenEvictionRunsMillis" value="30000" />
    </bean>

    <!-- Auto-initialize database schema on startup -->
    <bean id="databasePopulator" class="org.springframework.jdbc.datasource.init.ResourceDatabasePopulator">
        <property name="scripts">
            <list>
                <value>classpath:schema.sql</value>
            </list>
        </property>
        <property name="ignoreFailedDrops" value="true"/>
        <property name="continueOnError" value="false"/>
    </bean>

    <bean id="dataSourceInitializer" class="org.springframework.jdbc.datasource.init.DataSourceInitializer">
        <property name="dataSource" ref="dataSource"/>
        <property name="databasePopulator" ref="databasePopulator"/>
        <!-- Skip schema initialization on subsequent deployments to speed up startup -->
        <!-- Can be disabled by setting SKIP_SCHEMA_INIT=true environment variable -->
        <property name="enabled" value="#{systemEnvironment['SKIP_SCHEMA_INIT'] == null ? true : !systemEnvironment['SKIP_SCHEMA_INIT'].equals('true')}"/>
    </bean>

    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource" />
    </bean>

    <bean id="actorDao" class="com.martinis.dao.ActorDaoImpl">
        <constructor-arg ref="jdbcTemplate" />
    </bean>
    <bean id="actorService" class="com.martinis.service.ActorServiceImpl">
        <constructor-arg ref="actorDao" />
    </bean>

    <bean id="blockDao" class="com.martinis.dao.BlockDaoImpl">
        <constructor-arg ref="jdbcTemplate" />
    </bean>
    <bean id="blockService" class="com.martinis.service.BlockServiceImpl">
        <constructor-arg ref="blockDao" />
    </bean>

    <bean id="personDao" class="com.martinis.dao.PersonDaoImpl">
        <constructor-arg ref="jdbcTemplate" />
    </bean>
    <bean id="personService" class="com.martinis.service.PersonServiceImpl">
        <constructor-arg ref="personDao" />
    </bean>

    <bean id="projectDao" class="com.martinis.dao.ProjectDaoImpl">
        <constructor-arg ref="jdbcTemplate" />
    </bean>
    <bean id="projectService" class="com.martinis.service.ProjectServiceImpl">
        <constructor-arg ref="projectDao" />
    </bean>

    <bean id="sceneDao" class="com.martinis.dao.SceneDaoImpl">
        <constructor-arg ref="jdbcTemplate" />
    </bean>
    <bean id="sceneService" class="com.martinis.service.SceneServiceImpl">
        <constructor-arg ref="sceneDao" />
    </bean>

    <bean id="actorWebService" class="com.martinis.webservice.ActorWebServiceImpl">
        <constructor-arg ref="actorService" />
    </bean>
    <bean id="blockWebService" class="com.martinis.webservice.BlockWebServiceImpl">
        <constructor-arg ref="blockService" />
        <constructor-arg ref="personService" />
        <constructor-arg ref="sceneService" />
        <constructor-arg ref="projectService" />
    </bean>
    <bean id="personWebService" class="com.martinis.webservice.PersonWebServiceImpl">
        <constructor-arg ref="personService" />
        <constructor-arg ref="actorService" />
        <constructor-arg ref="projectService" />
    </bean>
    <bean id="projectWebService" class="com.martinis.webservice.ProjectWebServiceImpl">
        <constructor-arg ref="projectService" />
        <constructor-arg ref="sceneService" />
        <constructor-arg ref="personService" />
    </bean>
    <bean id="sceneWebService" class="com.martinis.webservice.SceneWebServiceImpl">
        <constructor-arg ref="sceneService" />
        <constructor-arg ref="blockService" />
        <constructor-arg ref="projectService" />
        <constructor-arg ref="personService" />
    </bean>

    <bean id="userService" class="com.martinis.service.UserServiceImpl">
        <constructor-arg ref="jdbcTemplate" />
        <constructor-arg ref="encoder" />
    </bean>

</beans>
